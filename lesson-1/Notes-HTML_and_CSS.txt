шаблон HTML-документа: написать html:5 и нажать Tab.
! и ввод делает заготовку документа
Ctrl + - масштаб браузера
Ctrl Shift i отладчик

в хедере можно задавать в высоту, в подвале не надо 

теги парные/
<p> <b>жирный

одиночные <br> переглс строк
 <hr> горизонтальная черта
jsfiddle.net онлайн редактор кода

--------------------------------------------
БЫСТРЫЙ ВВОД
Lorem  - текст рыба
ul>li{list$}*5 быстрый набор списка из 5 элементов с нумерацией($)
(h3>lorem3^+p>lorem)*3
.content>.block.block-$*3 - создает дивы с классами
.header+.content+.footer - 3 дива с классами
header.header+maun.content+footer.footer - 3 блока с класаами
.content__item*3
ul.menu>li.menu__list*3>a.menu__link{link-menu-$}

в CSS:
w100+h50+bd ширина, высота, рамка
-------------------------------------------------------------
top, header, content, footer-top, footer-bottom
---------------------------------------------------------
СЕМАНТИЧЕСКИЕ ТЕГИ
<header> - шапка сайта или раздела, где располагается один или несколько заголовков, группа навигационных цепочек. МОЖЕТ БЫТЬ НЕСКОЛЬКО на сайте
<nav> - группа навигационных цепочек(меню сайта). пагинация(номера страничек), хлебные крошки(путь к станичке на сайте), соцсети 
<main> основное УНИКАЛЬНОЕ содержимое сайта - нельзя пихать блоки с оффером, карточками товара, все что неуникально и меняется 
<footer> - подвал сайта или раздела, может содержать инфо об авторе, нав или контакты. может быть несколько
<section> - логическая область страницы, для новостей, блоков информации. может содержать заголовок
<article> - раздел контента.ю который образует независимую часть документа или сайта: статья в журнале, запись в блоке, комментарий. могут быть друг в друге article и section
<aside> - контент, который можно убрать со страницы без потери смысла. погода, курсы валют, реклама уже нет(браузер ее удаляет)
<figure> - текст и картинка связаны вместе, если важно чтобы они выдавались вместе
<details>виджет, который можно открыть или закрыть
<summary> - в этот тег заключается текст, который необходимо скрыть 





Спецсимволы: (начинаются с & и заканчиваются;)
&copy; copyright
&quot; двойные кавычки "
&raque; двойные кавычки >>
&lt; &gt; угловые скобки < >
&nbsp; неразнывный пробел
ТИПОГРАФ - ресурс, еоторый сам расставляет Спецсимволы

https://fonts.google.com/ можно взять ссылку и подключить шрифт в head 
www.freepik.com
https://fontawesome.com/
<!-- Комментарии-->

Блочные
<р> абзац
<h1> до <h6> заголовst
<ul> маркированный список
<ol> нумерованный список order lict
<li> пункты списка list
<article> статьи
<section> разделы
<blockquote> длинные цитаты 
<div>

СТРОЧНЫЕ
<a> ссылки
<img>
<em> выделенные слова 
<i> курсив
<strong> важные слова 
<input>
<q> короткие цитаты 
<abbr> аббревиатуры

<br> перенос на новыю строку

<dl> Список определений (<dl><dt>Термин</dt><dd>Определение</dd></dl>)
<dt> Термин
<dd> Определение
-------------------------------------------
ССЫЛКИ
абсолютные - "https://www.фдрес сайта"
относительные - "images/foto.jpg" или "../index.html"
якоря - ссылки по странице
    target="_blank" - открытие ссылки в другом окне
Якоря:
<a href="#" id="top">Главная</a>
<a href="#top">вверх</a>
----------------------------------

 

----------------------------------
ИЗОБРАЖЕНИЯ
<img 
    src ="ссылка на картинку" обязательно
    alt - текст, который отображается вместо картинки, если она не загрузилась - обязательно
    title - текст, который отображается при наведении мыши на картинку
    width="640" ширина картинки в пикселях - лучше писать в CSS
    height - высота картинки в пикселях 
>

JPEG небольщой размер, много цветов, управление качеством
    при сжатии теряется качество, не поддерживают прозрачность
    ДЛЯ: прямоугольное красивое изображение без прозрачности
GIF поддерживает анимацию, прозрачность, при сжатии не теряет в качестве
    количество цветов до 256
    ДЛЯ: анимации
PNG-24 при сжатии не теряет в качестве, много цветов, плаыный переход от прозрачной к цвтной
     ОЧЕНЬ много весит
     ДЛЯ: красивое изображение с прозрачностью
SVG векторый формат, малый размер файла, возможность редактировать
    только фигуры и линии, IE 8 не поддерживает      
    ДЛЯ: иконок на сайте
------------------------------------

<figure> (тег для оформления рисунка с подписью В HTML 5)
    <img>
    <figcaption>Подпись</figcaption>
</figure>

<a href="https://google.com/"  target="_blank">Google</a> Ссылка открывается в новом окне
<a href="#anchor">Перейти к якорю</a> Якорная ссылка, в теге куда ведет ссылка атрибут - id="anchor"

---------------
Таблицы
<thead> - для заголовка,
<tfoot> - нижний колонтитул таблицы,
<tbody> - основной контент таблицы
<caption> - заголовок таблицы
<table> (тег таблицы) по умолчанию без границ, для границ в css св-во border (или <table border="1"> ... </table>) 
    <thead>
        <tr> (строка)
            <th>Заголовок</th> размещение по центру и полужирный
            <th></th>
        </tr>
    </thead>
    <tbody>
        <tr> 
            <td>Ячейки</td>
            <td></td>
        </tr>
        <tr>
            <td colspan="2">Единственная ячейка</td> (атрибут растягивает на 2 ячейки вправо)
                rowspan="2" атрибут аналогично растягивает ячейку по строкам вниз
        </tr>
    </tbody>
    <tfoot>
        <tr> 
            <td>Ячейки</td>
            <td></td>
        </tr>
    </tfoot>
</table>

<table>
    <caption>Заголовок</caption>
        <tr> строка1
            <td>Столбец1</td>
            <td>Столбец2</td>
            <td>Столбец3</td>
        </tr>
        <tr> строка2
            <td>Столбец1</td>
            <td>Столбец2</td>
            <td>Столбец3</td>
        </tr>
</table>
table{
    width:200px; можно задать высоту и ширину
    height:100px;
    border: ; внешняя граница  таблицы
    border-collapse: collapse; убрать в таблице двойные линии
}
td {
    border: ; рамка ячеек
    vertical-align: top; (bottom, baseline, middle) выравнивание по вертикали
}
пользуемся генератором таблиц!


------------------------------------------------
ФОРМЫ
Существует два основных метода отправки данных: GET и POST (еще PUT, PATCH и DELETE)
GET
Когда ты вводишь в адресной строке браузера какой-либо адрес и переходишь по нему, ты отправляешь серверу запрос, называемый GET. В таком запросе данные могут отсутствовать, как здесь: https://www.google.ru/. А вот запрос https://www.google.ru/search?q=itс+stepik содержит в себе переменную q, которая имеет значение itc stepik. В данном случае запрос отправляется на адрес https://www.google.ru/search,  а данные из полей и их названия идут после ? через знак &. Предварительно данные кодируются в URL код, чтобы сервер не перепутал служебные символы (вроде /, или ﻿&) с частью запроса.

POST
Методом POST так же можно отправлять данные в URL. Но, в отличие от GET, он может иметь тело - специальную "коробочку", в которую можно положить данные, которые уйдут на сервер.
Этот метод обычно используется для отправки форм и загрузки файлов.

<form action="ссылка на обработчик формы" method="get или post">
    <input> поле. Тег одинарный 
            атрибуты: placeholder="текст в поле ввода"
    <input type="text"> Текстовое поле
    <input type="password"> ввод пароля
    <input type="date"> ввод даты
    <input type="checkbox">Флаги, галки (чекбоксы)
        <label>item<input type="checkbox"></label> связь текста с галочкой
        или <label for="item1">item</label>
            <input type="checkbox" id="item1">
    <input type="radio" name="gender" value="male" checked> Мужской<br> Радиокнопки, один вариант
    <input type="radio" name="gender" value="female"> Женский<br>
    <input type="file"> Загрузка файлов. 
    
    <input type="email"> Текстовое поле, у которого на клавиатуре мобильных устройств появляется символ @.
    <input type="tel"> На мобильных устройствах открывается клавиатура с числами.
    <input type="url"> вводы ссылки
    <input type="number" min="мин значение" max="макс значение" step="шаг изменения" value="начальное значение">
    <input type="range" min="" max="" step="" value>
    <input type="search"> поиск
    <button>Просто кнопка</button>
    <button type="submit">Отправка</button>
    <button type="reset">удалить</button>
    <input type="reset" value="Очистить"> Сброс всех значений
    <input type="submit" value="Сохранить"> Отправка
    <input type="button" value="Просто кнопка">
    <select Раскрывающийся список
        name="связывает все пункты" 
        size="сколько строк отображено" 
        multiple разрешает выбрать несколько значений
        > 
        <option value="название кнопки">
                
    <select size="3" multiple name="herou">
        <option disabled>выберите героя</option>
        <option selected value="человек паук">человек паук</option>
        <option value="бэтмен">бэтмен</option>
        <option value="халк">халк</option>
        <option value="тарзан">тарзан</option><br/>
        <p><input type="submit" value="отправить"/></p>
    </select>
    <textarea cols="30" rows="5"></textarea>


------------------------
------------------------
css
каскадная таблица стилей, средство описания оформления внешнего вида страниц

Подключение:
1. <link rel="stylesheet" href="style.css"> через внешний файл
    + применяются ко всему сайту, удобно редактировать, файл кэшируется
2. Через тэг “<style>”
    + для нескольких элементов
    - добавлять для каждой страницы
3. Через атрибут style="" (inline стили)
    + можно быстро прописывать для определенного элемента
    - необходимо писать для каждого тега
    - сложно редактировать

Синтаксис CSS состоит из двух частей: селекторы и свойства. 
Селекторами мы указываем элементы, а 
свойствами описываем их стиль.

БЭМ, то есть Блок, Элемент, Модификатор, это методология, созданная разработчиками Яндекса. 
БЭМ разделяет компоненты верстки на три группы:
    Блок: главный корневой элемент. .person {}
    Элемент: часть блока..person__head {}
    Модификатор: вариант или модификация блока..person--tall {}
    между словами -
для js кода класс отдельный, js-class



p {
 color: red;
 text-decoration: underline;
}
/* комментарий */

Селекторы: 
по тегу h1 {}
по классу .card {}
по id #id-name
по атрибуту [data-my-custom-attribute="my-custom-value"] {}
все элементы * {}

Вложенность: контекстные селекторы, - любой элемент внутри блока (ul li a - применяем к a внутри li внутри ul)
             дочерние селекторы, которые ниже по ложенности (ul > li - к дочерним li)
             соседние селекторы - рядом (img + p)
Наследование - ссылка исключение
Группирование свойств h1, h2, p

button,.button,.cta-button  список селекторов с общими свойствами
p.example  элемент с классом
.main.active  2 класса одновременно
.page p  вложенность на любом разном уровне (ко всем р внутри в элементе с классом page)
.page > p  вложенность на первом уровне (p на первом уровне вложенности в .page)
img + p  выбрать элемент p, который находится СРАЗУ ПОСЛЕ элемента img
input[type="password"]  выберет все элементы <input type="password">
p ~ span  выберет все элементы <span>, которые находятся после элемента <p> на том же уровне внутри одного родителя.

Приоритет применения стилей
каскадирование применяется тода, когда одному элементу присваивают разные стили. т.о. самый нижний стиль элемента главнее
максимальный приоритет !important;
1. Стили в атрибуте style (inline стили)
2. Уровень приоритета Селектора
        1. Селекторы тегов и псевдоэлементы — по 1 баллу (0, 0, 0, 1).
        2. Селекторы атрибутов, классы и псевдоклассы — по 10 баллов (0, 0, 1, 0).
        3. Идентификаторы — по 100 баллов (0, 1, 0, 0).
        4. Атрибут style — 1000 баллов (1, 0, 0, 0).
3. Стили в разделе <head>
4. Стили во внешних файлах
5. наследуемые от предков



Единицы измерения
    относительные:
        px -пиксели
        %
        em - высота текущего шрифта
    абсолютные:
        cm, mm, in, pt
Единицы измерения цвета:
    именованные
    функциональные RGBA - с прозрачностью
    шестнадцатеричные RGB - # 


БАЗОВЫЕ СВОЙСТВА СТИЛЕЙ
width - ширина блока 
height - высота
color - цвет текста

font-family: 'Roboto', 'Helvetica Nue', sans-serif; Подключение шрифта без засечек
        @font-face {                 Подключение шрифта
            font-family: 'MyWebFont';
            src: url('../fonts/WebFont.eot');
            src: url('../fonts/WebFont.eot?iefix') format('eot'),
                url('../fonts/WebFont.woff') format('woff'),
                url('../fonts/WebFont.ttf') format('truetype'),
                url('../fonts/WebFont.svg#webfont') format('svg');
            font-weight: normal;
            font-style: normal;
        }
font-weigh: bold	Полужирный шрифт Толщина шрифта
            normal	Обычный шрифт
            bolder	Более жирный шрифт, чем у родителя
            lighter	Менее жирный шрифт, чем у родителя
            inherit	Наследует значение родителя
            Числовое значение от 100 до 900	От очень тонкого до очень жирного шрифта
font-size: 42px; (small, medium. large) размер шрифта 
font-style: italic	Курсивный шрифт
            oblique	Наклонный шрифт
            normal	Обычный шрифт
            bold
            inherit	Наследует значение родителя
font-variant: small-caps; вроде заглавных
line-height: 24px; высота строки

text-align: center; положение текста по центру
            justify, растянуть
            left,
            right
text-decoration: underline - подчеркивает текст
                 none - не подчеркивает текст
                 overline - подчеркивание будет сверху 
                 line-trough - будет полностью перечеркнут текст
text-transform: capitalize; первая заглавная, остальные строчные
                lowercase; все буквы нижний регистр
                uppercase; все буквы верхний регистр

background-color: цвет фона; 
background-image: url(img/foto.jpg);
background-repeat: repeat-x;(repeat-y, no-repeat)
background-position: top; (bottom, left, right) - по умолчанию верзний левый угол
background-attachment: fixed; фиксация фона на экране
background-size: cover; (contain, 100%) растяжка фона-полностью-в процентах
background: цвет url('images/nude-president.png') позиция повтор; 

border-color: #f00;
border-style: solid; стиль рамки
              dotted
              dashed
              groove
              ridle
              double
              inset
              outset
border-width: 2px; ширина
              1px 2px - 1 верх и низ, 2 лев и прав
              1px 2px 3px - 1 верх, 2 лев и прав, 3 низ
              1px 2px 3px 4px - верх, прав, низ, лев
border-radius: 10px;
border: 2px solid black;

list-style-type: circle; кружочек (disc диск, square, armenian, decimal)
list-style-position: inside; наравне с нумерацией
                     outside на равне с текстом
list-style-image: url(img/list.png); только рисунок, без стилизаций

opacity: 0.4; прозрачность от 0 до 1

ширина блока = ширина+внутрений отступ+рамка+внешний отступ
схлопывание - только у внешних вертикальных отстуоп. отступ равен не сумме, а большему марджину
box-sizing: border-box значение высоты и ширины не меняется от паддингов и рамки
*{ обнуление ДЛЯ ВСЕХ элементов отступов по умолчанию
    margin:0;
    padding:0;
}
float: left; обтекание текста справа, схлопывание отсутствует, блоки не видят флоат
       none;
       right;
overflow: hidden; скрыть наезжающие части блоков на флоат
clear: both; обнуление флоатов, св-во указываем в следующем элементе за флоатом

Псевдокласс - атрибуты к селекторам с намерением определить состояние данного Селектора
    :hover - курсор мыши в пределах  элемента наведение на элемент
    :active - при активации элемента
    :focus при получении фокуса элемента
    :link для непосещенных ссылок
    :visited для ссылки на страницу, которую уже посетили
    :valid — выберет поля формы, содержимое которых прошло проверку в браузере на
соответствие указанному типу.
7. :invalid — выберет поля формы, содержимое которых не соответствует указанному типу.
8. :enabled — выберет все доступные (активные) поля форм.
9. :disabled — выберет заблокированные поля форм, т. е. находящиеся в неактивном состоянии.
10. :in-range — выберет поля формы, значения которых находятся в заданном диапазоне.
11. :out-of-range — выберет поля формы, значения которых не входят в установленный диапазон.
12. :lang() — выбирает абзацы на указанном языке.
13. :not(селектор) — выберет элементы, которые не содержат указанный селектор. Например,
                        класс, идентификатор или селектор элемента :not([type="submit"]).
14. :checked — выбирает выделенные (выбранные пользователем) элементы

Структурные псевдоклассы
1. :nth-child(odd) — выбирает нечётные дочерние элементы.
2. :nth-child(even) — выбирает чётные дочерние элементы.
3. :nth-child(3n) — выбирает каждый третий элемент среди дочерних.
4. :nth-child(3n+2) — выбирает каждый третий элемент, начиная со второго дочернего элемента(+2).
5. :nth-child(n+2) — выбирает все элементы, начиная со второго.
6. :nth-child(3) — выбирает третий дочерний элемент.
7. :nth-last-child() — в списке дочерних элементов выбирает элемент с указанным местоположением, аналогично с :nth-child(), но начиная с последнего, в обратную сторону.
8. :first-child — позволяет оформить только самый первый дочерний элемент тега.
9. :last-child — позволяет форматировать последний дочерний элемент тега.
10. :only-child — выбирает элемент, являющийся единственным дочерним элементом.
11. :empty — выбирает элементы, у которых нет дочерних элементов.
12. :root — выбирает корневой элемент в документе (элемент html).

Псевдоклассы по типу дочернего элемента
1. :nth-of-type() — выбирает элементы по аналогии с :nth-child(), при этом берёт во внимание
только тип элемента.
2. :first-of-type — позволяет выбрать первый дочерний элемент.
3. :last-of-type — выбирает последний тег конкретного типа.
4. :nth-last-of-type() — выбирает элемент заданного типа в списке элементов в соответствии с
указанным местоположением начиная с конца.
5. :only-of-type — выбирает единственный элемент указанного типа среди дочерних элементов
родительского элемента.

псевдоэлементы ::в современных браузерах
::after добавляет контент после содержимого элемента
::before добавляет контент до содержимого элемента
::first-letter определяет стиль первого элемента в тексте
::first-line определяет стиль первой строки блочного текста
    content: 'text';

Обнуление стилей - для кроссбраузерности, чтобы не мешали отступы по умолчанию
*{ не желательно использовать для больших проектов, тк к каждому сттилю дописывает отступы и долго грузится
    margin: 0;
    padding: 0;
}
reboot
reset
normalize - чаще всего подключается 


-------------------------------------------------------------

ПОЗИЦИОНИРОВАНИЕ
display: none; скрыть, выпадает из потока (visibility: hidden; просто скрывает)
         block; блочный
         inline; строчный
         inline-block; строчно-блочный, как будто строчный, но можно задать размеры
         table-cell; ячейка таблицы, подстраивается под размер содержимого
         flex; гибкий

у флекс-контейнера свойства:
display: flex;
justify-content: flex-start; распределение погоризонтальной оси
                 flex-end; прижимает вправо
                 center; по центру
                 space-around; равномерное распределение по горизонтали, с боков половина
                 space-between; сбоку нет отступов
align-items: center; распределение по вертикали (по второстепенной оси)
             flex-end; к нижней
             flex-start; к верху
             stretch; растягивает по всей вертикальной оси, если не задана высота элемента
             base-line; зависит от контента
flex-wrap: wrap; перенос на новую строку
           nowrap;
           wrap-reverse; переносятся строки в обратном порядке(например вверх)
flex-direction: column; расположение в колонку, переворот главной оси
                row;
                row-reverse;
                column-reverse;
flew-flow: row wrap; свойство обьединяет направление оси и перенос
align-content: отвечает за выравнивание целых строк относительно гибкого контейнера. Свойство не будет давать эффекта, если гибкие элементы занимают одну строку
                flex-start: все линии прижимаются к началу вертикальной оси.
                flex-end: все линии прижимаются к концу вертикальной оси.
                center: flex-элементы центрируются относительно flex-контейнера.
                space-between: линии распределяются от верхнего края до нижнего, оставляя свободное
                пространство между строками, крайние же строки прижимаются к краям контейнера.
                space-around: равномерное распределение блоков по контейнеру.
                stretch (default): линии растягиваются, занимая всё доступное пространство блока родител


у дочернего элемента:
align-self: center; по центру (есть высота блока)
            flex-end; внизу
flex-grow: 1; соотношение блоков к друг другу(не задана ширина)
            если у одного блока 1, а у других он не задан, но блок с flex-grow:1 занимает все оставшееся место
order: 1 (начинается с 0, по умолчанию)- нумерация блоков, можно строить последовательност в css
flex-basis: 200px; минимальный показатель после которого срабатывает перенос
flex-shrink: коэффициент сжатия

.container{
    max-width:700;
    margin: 0 auto; центрирование
}
margin: auto центрирует горизонтально и вертикально


    когда один блок поверх другого:
position: statis - по умолчанию
          relative - относительное, относительно точки где находиммся. из потока не уходит, место старое не занимается
          absolute - самостотельно не применять! глобальное. относительно браузера. старое место занимается, стоит все время на своем месте
          fixed - фиксированное
          sticky - липкость блока к родителю
          initial Устанавливает значение свойства в значение по умолчанию
          inherit Наследуется от родительского элемента
смещение: если position не static 
left: 20px;
right: 50em;
top: 60%;
bottom: -200px;

        Auto Значение по умолчанию. Вычисляемое значение свойства равно нулю
        % Процентные значения вычисляются относительно высоты
        блока-контейнера для top и bottom и ширины блока-контейнера для right и
        left
        Initial Устанавливает значение свойства в значение по умолчанию
        inherit Наследует значение свойства от родительского элемента
        © geekbrains.ru 2
        Для свойства top положительные значения перемещают верхний край позиционируемого элемента
        ниже, а отрицательные – выше верхнего края его блока-контейнера. Для свойства left положительные
        значения сдвигают край позиционируемого элемента вправо, а отрицательные – влево. То есть
        положительные значения смещают элемент внутрь блока-контейнера, а отрицательные – за его
        пределы.

Комбинация:
для контейнера relative, для элемента abcolute c координатами.
используем для ситуации блок поверх других блоков
z-index: -1; 0; 1; любое число для последовательности отображения элементов
Пример:
        .content{
        position:relative;
        }
        .item{
        width: 200px;
        height: 200px;
        background-color: green;
        position:absolute;
        }
        .item-2{
        display: none;
        background-color: red;
        }
        .content:hover .item-2{
        display:block;
        z-index: 1;
        }
        .content{
        position:relative;
        }
        .item{
        width: 200px;
        height: 200px;
        background-color: green;
        position:absolute;
        }
        .item-2{
        display: none;
        background-color: red;
        }
        .content:hover .item-2{
        display:block;
        z-index: 1;
        }

float: left; oбязательно элемент должен иметь ширину 
        right;

clear:  Left Отменяет обтекание по левой стороне, смещая элемент вниз. Правое        обтекание остается в силе
        Right Отменяет обтекание по правой стороне, смещая элемент вниз. Левое        обтекание остается в силе
        Both Значение по умолчанию. Также отменяет очистку обтекания,        установленного для элементов одной группы
        None Значение по умолчанию. Также отменяет очистку обтекания,        установленного для элементов одной группы.
        initial Устанавливает значение свойства в значение по умолчанию
        inherit Наследует значение свойства от родительского элемента       

создается эффект схлопывания, когда плавающий блок выходит за пределы блока-контейнера.
Для решения проблемы создаем класс .clearfix и в сочетании с псевдоклассом :after применяем его к блоку-контейнеру.
        <div class="container clearfix">
            <div class="floatbox">
            </div>
        </div>
        .container {
            padding: 1em;
            background: #e7e6d4;
            border: 3px dashed #645a4e;
        }
        .floatbox {
            float: left;
            width: 300px;
            height: 150px;
            margin-right: 1em;
            padding: 0 1em;
            background: #fff;
            border: 3px dashed #666666;
        }
        .clearfix:after {
            content: "";
            display: block;
            height: 0;
            clear: both;
            visibility: hidden;
        }



--------------------------------------------------------
Адаптив
max-width
min-height
height: 100vh - 100% значений высоты экрана, 50vh - половина высоты экрана
width: 50vw - половина ширины экрана
<meta name="viewport" content="width=device-width, initial-scale=1.0"> - отвечает за изменение сайта по девайсной ширине, если не добавить в <head> то адаптироваться сайт не будет 
    --------------------------
медиазапрос - возможность добавить стилистику под определенное разрешение экрана
если много таких запросов, то сайт грузится дольше, файл стилей большще
@media(max-width: 500px){ стили применяются если ширина экрана 500 и меньше
    .header {
        height: 80px;
    }
}
min-значение - от минимума к большему(если ведется разработка от мобильного устройства)
max-значение - от большего к меьшему(если есть сайт и ведется разработка)

@media(min-width: 320px) and (max-width: 500px) - ширина 320 и до 500 

прижатие подвала
блоки top(ХЕДЕР И СЕРЕДИНА) и футер + родительский блок wrapper:
.wrapper {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}
.top {
    flex-grow: 1; - растягивает контентную часть по высоте, а футер будет той высоты которая у него задана 
}
к body применяют стилистику, но высоту ширину применять плохой тон 
----------------------------------------------------------------------------------
Инструменты разработчика
1. отладчик
2. валидатор (validator.w3.org)
3. оптимизация изображений tinypng.com 
4. совместимость разных версий браузеров caniuse.com 

выбор хостинга - часть сервера. платный, бесплатный. 000webhost.com 

кроссбраузерность - проверить все основные браузеры 
                  - сбросить стили css это *{
                                                margin: 0;
                                                padding: 0;
                                            }
                  - условный комментарий указывает файл стилей для какого-то конкретного браузера 
                        lt - версия меньше указанной 
                        lte - версия меньше указанной или равна указанной 
                        gt - версия больше указанной 
                        gte - версия больше или равна указанной 
                    для значений выше 6 ИЭ     
                    <!--[if gte IE 6]>
                            <link href="css/style_ie.css" rel="stylesheet" type="text/css"/>
                        <![endif]-->
                    
                    [if (IE 6) & (IE7)] и 
                    [if (IE 6) | (IE7)] или 
                    [if !(IE 8)] не
---------------------------------------
bootstrap - это фреймфорк для html и css - уже написанные части кодаю готовые стили, js код 
подключать уже к новому проекту 
getbootstrap.com 
get started - самый быстрый способ использования он лайн 
    вставляем код страницы в новый проект 
    выбираем КОМПОНЕНТ, копируем и добавляем себе 

css пользователя должен быть подключен НИЖЕ бутстрапа для переписывания
добавляем свой класс-модификатор и переписываем что надо 

Препроцессоры -  HTML (язык разметки) и CSS (каскадная таблица стилей) не программирование. а прпроцессор - программистский подъод к CSS.
Используют переменные, вложенность, наследуемость, циклы, функции, математические операции
можно начать с ними работать в любой момент создания проекта

SAS как в питоне с табуляциями без скобок
SASS- со скобками и точками с запятой, запускает RUBY и работает на серверной стороне
LESS - чуть проще, бек не тянет, нет группировки стилей, использует JS для работы на стороне клиена


scss(sass)
можно создавать переменные $имя (в less - @переменная )
можно класс вкладывать в родительский класс
заменять название в классе на & 
можно складывать, вычитать, делить 

надо делать компиляцию из файла препроцессора в css 






jsfiddle.net 
https://www.figma.com/file/AOKabCJEdEqr9ZZEaJ0IMS/html%2Fcss-(Copy)?type=design&node-id=27-162&t=b5WKEDbZNDkUxVqk-0
https://www.figma.com/file/7XhT5EWfZX0W6ohgd57Pny/shop?type=design&node-id=0-1&t=REf7eiax0WPYRQqO-0

www.freepik.com
encycolorpedia.ru
jsbin.com
encycolorpedia.ru
админ-панель сайта с помощью bootstrap

форма в ней инпут и баттон тийп сабмит, форме дать флекс
форме высоту, элементам 100%



подключение шрифта
fonts.google.com 
1.скачать себе локально
2.<link> это selected справа в панели и добавить в head 

иконочные шрифты 
fontawesome.com 
сщздаем набор и копируем в head ниже остальных 
берем иконку, копируем ее тег и добавляем в начало класса fa 
<i class="fa fa-brands fa-vk"></i> 
если класс стилизуем для всех иконок, берем класс fa 
если брэнды, то fa-brands
если вк то fa-vk 

webcode.tools собирает формы и выдает теги 



<details> виджет, который пользователь может открыть или свернуть 
аккордеон - несколько details которые идут друг за другом 
<details>
<summary>
текст сворачивания 
</summary>
</details>
        summary {
            width: 100px;
            height: 40px;
            background-color: red;
            line-height: 40px;
            list-style-type: none; убирает треугольник сворачивания 
            text-align: center;
        }

-----------------------------
form 
input id=""name" 
label for="name"
placeholder="предзаписанные"
autofocus  автофокус при загрузке
required - обязательный для заполнинея
type="number " min="14" max="100"
type="telephone"
select 
    option value=""
input type="checkbox" 

есть стартовая страница, есть другие страницы: каталог, решистрация, корзина и т.д.
надо ли для этих страниц  писать стили в том же css файле, или подключить дополнительный для каждой странички?